package ParserPosition
with
    import 'nu-stream::stream' {
        isEmpty
        first},
    
    import 'bennu::parse' {
        Position},
    
    import 'khepri-ast::position' {
        SourceLocation
        SourcePosition}
in {

/**
 * Position state used during parsing.
 * 
 * @member tokenPosition Index in token stream.
 * @member sourcePosition Character position of head of token stream.
 * @member prevEnd Character location of last token consumed.
 */
ParserPosition := function \tokenPosition sourcePosition prevEnd =self-> {
    self.tokenPosition := tokenPosition;
    self.sourcePosition := sourcePosition;
    self.prevEnd := prevEnd;
};
ParserPosition.prototype = new Position();
ParserPosition.prototype.constructor = ParserPosition;

ParserPosition.initial = new ParserPosition(
    Position.initial,
    SourcePosition.initial,
    Position.initial);

ParserPosition.prototype.increment = \tok r =self->
    new ParserPosition(
        self.tokenPosition.increment(tok),
        ?isEmpty r
            :tok.loc.end
            :first(r).loc.start,
        tok.loc.end);

ParserPosition.prototype.toString = \ =self->
    '' + self.sourcePosition;

ParserPosition.prototype.compare = \pos =self->
    self.tokenPosition.compare(pos.tokenPosition);

}