/**
 * @fileOverview Literal and symbol parsers.
 */
package (
    literal

    nullLiteral
    booleanLiteral
    numericLiteral
    stringLiteral
    regularExpressionLiteral
    
    identifier)
with
    import 'bennu::parse' {bind choice label},
    import 'khepri-ast::value' ast_value,
    import './token_parser' token
in {

var literalParser = \kind p ->
    p.map\x ->
        ast_value.Literal.create(x.loc, kind, x.value);

/* Literals
 ******************************************************************************/
nullLiteral = label@'Null Literal' <|
    literalParser(
        'null',
        token.nullLiteral);

booleanLiteral = label@'Boolean Literal' <|
    literalParser(
        'boolean',
        token.booleanLiteral);

numericLiteral = label@'Numeric Literal' <|
    literalParser(
        'number',
        token.numericLiteral);

stringLiteral = label@'String Literal' <|
    literalParser(
        'string',
        token.stringLiteral);

regularExpressionLiteral = label@'Regular Expression Literal' <|
    literalParser(
        'regexp',
        token.regularExpressionLiteral);

literal = label@'Literal' <|
    choice(
        nullLiteral,
        booleanLiteral,
        numericLiteral,
        stringLiteral,
        regularExpressionLiteral);

/* Symbols
 ******************************************************************************/
identifier = label@'Identifier' <|
    token.anyIdentifier
        .map\x -> ast_value.Identifier.create(x.loc, x.value);

}