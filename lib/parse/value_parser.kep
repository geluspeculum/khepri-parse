/**
 * @fileOverview Parsers for literals and symbols.
 */
package (
    literal

    nullLiteral
    booleanLiteral
    numericLiteral
    stringLiteral
    regularExpressionLiteral
    
    identifier)
with
    import 'bennu::parse' {always bind choice Parser},
    import 'khepri-ast::value' ast_value,
    import './token_parser' token
in {

var literalParser = \kind, p ->
    bind(p, \x ->
        always <| ast_value.Literal.create(x.loc, kind, x.value));

/* Literals
 ******************************************************************************/
nullLiteral = Parser@'Null Literal' <|
    literalParser(
        'null',
        token.nullLiteral);

booleanLiteral = Parser@'Boolean Literal' <|
    literalParser(
        'boolean',
        token.booleanLiteral);

numericLiteral = Parser@'Numeric Literal' <|
    literalParser(
        'number',
        token.numericLiteral);

stringLiteral = Parser@'String Literal' <|
    literalParser(
        'string',
        token.stringLiteral);

regularExpressionLiteral = Parser@'Regular Expression Literal' <|
    literalParser(
        'regexp',
        token.regularExpressionLiteral);

literal = Parser@'Literal' <|
    choice(
        nullLiteral,
        booleanLiteral,
        numericLiteral,
        stringLiteral,
        regularExpressionLiteral);

/* Symbols
 ******************************************************************************/
identifier = Parser@'Identifier' <|
    bind(
        token.anyIdentifier,
        \x -> always <| ast_value.Identifier.create(x.loc, x.value));

}