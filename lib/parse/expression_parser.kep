/**
 * @fileOverview Khepri expression parsers.
 */
package (
    arrayLiteral
    
// Object Literal
    propertyName
    propertyInitializer
    objectProperties
    objectLiteral
    
// Function
    functionExpression
    
// Operator
    operatorExpression
    
    primaryExpression
    
// Curry Expression
    curryExpression
    
// Call Expression
    args
    
// Application Expression
    applicationExpression
    
// Member Expression
    dotAccessor
    bracketAccessor
    accessor
    memberExpression
    
// New Expression
    newExpression
    
// Unary Expression
    unaryOperator
    unaryExpression
    
// Binary Expression
    binaryExpression
    
// Conditional Expression
    conditionalExpression

// Let Expression
    letExpression

// Assignment
    leftHandReferenceExpression
    assignmentOperator
    assignmentExpression

// Expression
    expression
    topLevelExpression)
with
    import 'bennu::parse' {
        always
        append
        attempt
        bind
        binds
        choice
        cons
        eager
        either
        enumeration
        expected
        many
        memo
        next
        optional
        Parser},
    import 'bennu::lang' {
        between
        chainl1
        chainr1
        sepBy
        sepBy1
        then},
    import 'nu-stream::stream' {foldl foldr},
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value,
    
    import '../position' {SourceLocation},
    import './common' {node nodea precedence},
    import './token_parser' {keyword punctuator},
    import './program_parser' program_parser,
    import './value_parser' {identifier literal stringLiteral},
    import './pattern_parser' pattern
in {

/* Circular Declarations 
 ******************************************************************************/
var sourceElements = \args(...) -> {
    with
        import './program_parser' {sourceElements}
    in {
        return sourceElements.apply(undefined, args);
    }
};

/* Forward Declarations
 ******************************************************************************/
expression = \args(...) -> expression.apply(undefined, args);

memberExpression = \args(...) -> memberExpression.apply(undefined, args);

/* Parsers
 ******************************************************************************/
// Array Literal
////////////////////////////////////////
arrayLiteral = Parser@'Array Literal' <| let
    arrayElement = expression,
    
    arrayElements = Parser@'Array Elements' <|
        eager <| sepBy(punctuator ',', arrayElement)
            |> expected@"array element"
in
    node(
        between(punctuator '[', punctuator ']',
            arrayElements),
        ast_expression.ArrayExpression.create);

// Object Literal
////////////////////////////////////////
propertyName = stringLiteral;

propertyInitializer = Parser@'Property Initializer' <|
    nodea(
        enumeration(
            then(
                propertyName,
                punctuator ':'),
            expression),
        ast_value.ObjectValue.create);

objectProperties = Parser@'Object Properties' <|
    eager <| sepBy(punctuator ',', propertyInitializer);

objectLiteral = Parser@'Object Literal' <|
    node(
        between(punctuator '{', punctuator '}',
            objectProperties),
        ast_expression.ObjectExpression.create);

// Function Expression
////////////////////////////////////////
var formalParameterList = pattern.argumentsPattern;

var statementBody = node(
     between(punctuator '{', punctuator '}',
         sourceElements),
    ast_statement.BlockStatement.create);

var lambdaBody = expression;

var functionBody = either(
    statementBody,
    lambdaBody);

functionExpression = Parser@'Function Expression' <|
    nodea(
        cons(
            optional(null, next(
                keyword 'function',
                optional(null, identifier))),
            next(
                punctuator '\\',
                enumeration(
                    formalParameterList,
                    next(
                        punctuator '->',
                        functionBody |> expected@"function body")))),
        ast_expression.FunctionExpression.create);

// Let Expression
////////////////////////////////////////
var letBinding = Parser@'Let Binding' <|
    nodea(
        enumeration(
            pattern.topLevelPattern |> expected@'pattern',
            punctuator('=', '=:', ':='),
            expression |> expected@'let binding expression'),
       \loc pattern rec expr ->
            ast_declaration.Binding.create(loc,
                pattern,
                expr,
                (rec.value === ':=')));

letExpression = Parser@'Let Expression' <| let
    letBindings = sepBy1(punctuator ',',
        letBinding)
        |> expected@'let bindings',
    
    letBody = expression
        |> expected@'let body expression'
in
    nodea(
        next(
            keyword 'let',
            enumeration(
                eager letBindings,
                next(
                    keyword 'in',
                    letBody))),
        ast_expression.LetExpression.create);

// Conditional Expression
////////////////////////////////////////
conditionalExpression = Parser@'Conditional Expression' <|
    nodea(
        next(
            punctuator '?',
            enumeration(
                expression,
                next(
                    punctuator ':',
                    expression
                    |> expected@"conditional consequent expression"),
                next(
                    punctuator ':',
                    expression
                    |> expected@"conditional alternate expression"))),
        ast_expression.ConditionalExpression.create);

// Operators Expression
////////////////////////////////////////
var unaryOperatorExpression = Parser@'Unary Operator Expression' <|
    bind(
        either(
            keyword 'typeof',
            punctuator(
                'void',
                '~',
                '!',
                '++',
                '--')),
        \{loc, value} -> always(ast_expression.UnaryOperatorExpression.create(loc, value)));

var binaryOperatorExpression = Parser@'Binary Operator Expression' <|
    bind(
        either(
            keyword 'instanceof',
            punctuator(
                '*',
                '/',
                '+',
                '-',
                '%',
                '<<',
                '>>',
                '>>>',
                '<',
                '>',
                '<=',
                '>=',
                '==',
                '!=',
                '===',
                '!==',
                '&',
                '^',
                '|',
                '||',
                '&&',
                '\\>',
                '|>')),
        \{loc, value} -> always(ast_expression.BinaryOperatorExpression.create(loc, value)));

var ternayOperatorExpression = Parser@'Ternary Operator Expression' <|
    bind(
        punctuator '?',
        \{loc, value} -> always(ast_expression.TernaryOperatorExpression.create(loc, value)));

operatorExpression = Parser@'Operator Expression' <|
    choice(
        unaryOperatorExpression,
        binaryOperatorExpression,
        ternayOperatorExpression);

// Primary Expression
////////////////////////////////////////
primaryExpression = Parser@'Primary Expression' <|
    choice(
        letExpression,
        conditionalExpression,
        identifier,
        literal,
        arrayLiteral,
        objectLiteral,
        functionExpression,
        attempt <| between(punctuator '(', punctuator ')',
            operatorExpression),
        between(punctuator '(', punctuator ')',
            expression |> expected@"expression"));

// args
////////////////////////////////////////
args = Parser@'Arguments' <| let
    element = expression |> expected@"argument"
in
    node(
        between(punctuator '(', punctuator ')',
            eager <| sepBy(punctuator ',', element)),
        \loc x -> {
            x.loc = loc;
            return x;
        });

// Accessor
////////////////////////////////////////
accessor = Parser@'Accessor' <|
    node(
        next(
            punctuator '.',
            either(
                bind(identifier, \x -> always([x, false])),
                bind(
                    between(punctuator '(', punctuator ')',
                        expression |> expected@"accessor expression"),
                    \x -> always([x, true])))),
        \loc [x computed] -> ({
            'loc': loc,
            'property': x,
            'computed': computed
        }));

// New Expression
////////////////////////////////////////
newExpression = Parser@'New Expression' <|
    nodea(
        next(
            keyword 'new',
            enumeration(
                memberExpression |> expected@"member expression",
                args |> expected@"argument list")),
        ast_expression.NewExpression.create);

// Member Expression
////////////////////////////////////////
var accessorReducer = \p, c -> 
    ast_expression.MemberExpression.create(
        SourceLocation.merge(p.loc, c.loc),
        p,
        c.property,
        c.computed);

memberExpression = Parser@'Member Expression' <|
    binds(
        enumeration(
            either(
                primaryExpression,
                newExpression),
            many accessor),
        foldl@accessorReducer \>> always);

// Lefthand side Expression
////////////////////////////////////////
var leftHandSideExpression = Parser@'Call Expression' <| let
    reducer = \p c ->
        ?c.hasOwnProperty('property')
            :ast_expression.MemberExpression.create(
                SourceLocation.merge(p.loc, c.loc),
                p,
                c.property,
                c.computed)
            :ast_expression.CallExpression.create(
                SourceLocation.merge(p.loc, c.loc),
                p,
                c)
in
    binds(
        enumeration(
            memberExpression,
            many <| either(args, accessor)),
        foldl@reducer \>> always);

// Curry Expression
////////////////////////////////////////
curryExpression = Parser@'Curry Expression' <| let
    reducer = \f args -> 
        ast_expression.CurryExpression.create(
            SourceLocation.merge(f.loc, args.loc),
            f,
            [].concat(args))
in
    binds(
        enumeration(
            leftHandSideExpression,
            many(
                next(
                    punctuator '@',
                    either(
                        args,
                        leftHandSideExpression)
                    |> expected@'curry argument'))),
        foldl@reducer \>> always);

// Application Expression
////////////////////////////////////////
applicationExpression = Parser@'Call Expression' <|
    chainl1(
        always <|\p c ->
            ast_expression.CallExpression.create(
                SourceLocation.merge(p.loc, c.loc),
                p,
                [c]),
        curryExpression);

// Unary Expression
////////////////////////////////////////
unaryOperator = Parser@'Unary Operator' <|
    either(
        keyword('typeof', 'void'),
        punctuator('++', '--', '~', '!'));

unaryExpression = Parser@'Unary Expression' <| let
    reducer = \argument op -> 
        ast_expression.UnaryExpression.create(
            SourceLocation.merge(op.loc, argument.loc),
            op.value,
            argument)
in
    binds(
        enumeration(
            many unaryOperator,
            applicationExpression |> expected@"unary argument"),
        \ops, expression ->
            always(foldr(reducer, expression, ops)));

// Binary Expressions
////////////////////////////////////////
var multiplicativeOperator = punctuator('*', '/', '%');

var additiveOperator = punctuator('+', '-');

var shiftOperator = punctuator('<<', '>>', '>>>');

var relationalOperator = either(
    punctuator('<', '>', '<=', '>='),
    keyword 'instanceof');

var equalityOperator = punctuator('==', '!=', '===', '!==');

var bitwiseANDOperator = punctuator '&';

var bitwiseXOROperator = punctuator '^';

var bitwiseOROperator = punctuator '|';

var logicalANDOperator = punctuator '&&';

var logicalOROperator = punctuator '||';

var composeOperator = punctuator('\\>', '\\>>');

var reverseComposeOperator = punctuator('<\\', '<<\\');

var pipeOperator = punctuator '|>';

var reversePipeOperator = punctuator '<|';

var precedenceTable = [
    {
        'sep': multiplicativeOperator,
        'precedence': 1,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': additiveOperator,
        'precedence': 2,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': shiftOperator,
        'precedence': 3,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': relationalOperator,
        'precedence': 4,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': equalityOperator,
        'precedence': 5,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': bitwiseANDOperator,
        'precedence': 6,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': bitwiseXOROperator,
        'precedence': 7,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': bitwiseOROperator,
        'precedence': 8,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': composeOperator,
        'precedence': 9,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': reverseComposeOperator,
        'precedence': 9,
        'right': true,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': pipeOperator,
        'precedence': 10,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': reversePipeOperator,
        'precedence': 10,
        'right': true,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': logicalOROperator,
        'precedence': 11,
        'node': ast_expression.LogicalExpression
    }, {
        'sep': logicalANDOperator,
        'precedence': 12,
        'node': ast_expression.LogicalExpression
    }
];

binaryExpression = Parser@'Binary Expression' <|
    precedence(
        unaryExpression |> memo,
        precedenceTable);

// Expression
////////////////////////////////////////
expression = binaryExpression;


// Left Hand Reference Expression
////////////////////////////////////////
leftHandReferenceExpression = Parser@'Left Hand Reference Expression' <|
    binds(
        enumeration(
            identifier |> memo,
            many accessor |> memo),
        foldl@accessorReducer \>> always);

// Assignment Expression
////////////////////////////////////////
assignmentOperator = punctuator '=';

assignmentExpression = Parser@'Assignment Expression' <|
    nodea(
        append(
            attempt <| enumeration(
                leftHandReferenceExpression,
                assignmentOperator),
            enumeration(
                expression |> expected@'expression')),
        \loc, left, op, right ->
            ast_expression.AssignmentExpression.create(loc, op.value, left, right));

// Delete Expression
////////////////////////////////////////
var deleteOperator = keyword 'delete';

var deleteExpression = Parser@'Delete Expression' <|
    nodea(
        enumeration(
            deleteOperator,
            leftHandReferenceExpression |> expected@'reference expression'),
        \loc op expression ->
            ast_expression.UnaryExpression.create(loc, op.value, expression));

// Top Level Expression
////////////////////////////////////////
topLevelExpression = choice(
    deleteExpression,
    assignmentExpression,
    expression);

}