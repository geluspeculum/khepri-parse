/**
 * @fileOverview Khepri expression parsers.
 */
package (
    arrayLiteral
    objectLiteral
    
    operatorExpression
    
    letExpression
    
    primaryExpression
    
    accessor
    memberExpression
    
    newExpression
    curryExpression
    applicationExpression

// Unary Expression
    unaryOperator
    unaryExpression
    
// Binary Expression
    binaryExpression
    
// Conditional Expression
    conditionalExpression
    
// Assignment
    leftHandReferenceExpression
    assignmentExpression

// Expression
    expression
    topLevelExpression)
with
    import 'bennu::parse' {
        always
        append
        attempt
        bind
        binds
        choice
        eager
        either
        enumeration
        expected
        many
        many1
        memo
        next
        optional
        rec
        token
        late
        label},
    import 'bennu::lang' {
        between
        chainl1
        sepBy
        sepBy1
        then},
    import 'nu-stream::stream' {foldl foldr},
    
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::value' ast_value,
    import 'khepri-ast::position' {SourceLocation},
    
    import './common' {node nodea precedence},
    import './token_parser' tokenParser#{
        keyword
        punctuator
        prefixedOp},
    import './value_parser' value#{
        identifier
        literal
        stringLiteral
        numericLiteral},
    import './pattern_parser' {topLevelPattern},
    import './function_parser' _
in {

/* Circular Declarations 
 ******************************************************************************/
var functionExpression = late\-> {
    with import './function_parser' {functionExpression} in {
        return functionExpression;
    }
};

/* Forward Declarations
 ******************************************************************************/
expression = late\-> { return expression; };

memberExpression = late\-> { return memberExpression; };

curryExpression = late\-> { return memberExpression; };

/* Components
 ******************************************************************************/
// args
////////////////////////////////////////
var args = label@'Arguments' <| let
    arg = expression
in
    node(
        between(punctuator '(', punctuator ')',
            eager <| sepBy(punctuator ',',
                arg |> expected@"argument")),
        \loc x -> {
            x.loc = loc;
            return x;
        });

/* SubExpression
 ******************************************************************************/
// Array Literal
////////////////////////////////////////
arrayLiteral = label@'Array Literal' <| let
    arrayElement = expression,
    
    arrayElements =
        sepBy(punctuator ',',
            arrayElement |> expected@"array element")
in
    node(
        between(punctuator '[', punctuator ']',
            eager arrayElements),
        ast_expression.ArrayExpression.create);

// Object Literal
////////////////////////////////////////
objectLiteral = label@'Object Literal' <| let
    propertyName = choice(
        stringLiteral,
        numericLiteral,
        identifier),
    
    propertyInitializer = label@'Property Initializer' <|
        nodea(
            enumeration(
                then(
                    propertyName,
                    punctuator ':'),
                expression),
            ast_value.ObjectValue.create),
    
    objectProperties =
        sepBy(punctuator ',',
            propertyInitializer |> expected@"object property")
in
    node(
        between(punctuator '{', punctuator '}',
            eager objectProperties),
        ast_expression.ObjectExpression.create);

// Let Expression
////////////////////////////////////////
var letBinding = label@'Let Binding' <|
    nodea(
        enumeration(
            topLevelPattern |> expected@'pattern',
            punctuator('=', '=:', ':='),
            expression |> expected@'bound value'),
       \loc pattern rec expr ->
            ast_declaration.Binding.create(loc,
                pattern,
                expr,
                (rec.value === ':=')));

letExpression = label@'Let Expression' <| let
    letBindings =
        sepBy1(punctuator ',',
            letBinding),
    
    letBody = expression
in
    nodea(
        next(
            keyword 'let',
            enumeration(
                eager letBindings |> expected@'let bindings',
                next(
                    keyword 'in',
                    letBody |> expected@'let body expression'))),
        ast_expression.LetExpression.create);

// Conditional Expression
////////////////////////////////////////
conditionalExpression = label@'Conditional Expression' <|
    nodea(
        next(
            punctuator '?',
            enumeration(
                expression,
                next(
                    punctuator ':',
                    expression
                    |> expected@"conditional consequent expression"),
                next(
                    punctuator ':',
                    expression
                    |> expected@"conditional alternate expression"))),
        ast_expression.ConditionalExpression.create);

// Operators Expression
////////////////////////////////////////
var unaryOperatorExpression = label@'Unary Operator Expression' <|
    choice(
        value.unaryOperator,
        keyword('typeof', 'void').map \ {loc value} ->
            ast_value.UnaryOperator.create(loc, value),
            
        attempt <| next(
            punctuator '.',
            identifier)
        .map \ {loc name} ->
            ast_value.UnaryOperator.create(loc, '.' + name));

var binaryOperatorExpression = label@'Binary Operator Expression' <|
    nodea(
        enumeration(
            optional(false, keyword '_'),
            choice(
                keyword ('instanceof', 'new'),
                punctuator('.', '@'),
                tokenParser.binaryOperator)),
        \loc flipped op ->
            ast_value.BinaryOperator.create(loc, op.value, !!flipped));

var ternayOperatorExpression = label@'Ternary Operator Expression' <|
    punctuator('?')
        .map \ {loc value} ->
            ast_value.TernaryOperator.create(loc, value);

operatorExpression = label@'Operator Expression' <| let
    op = choice(
        unaryOperatorExpression,
        binaryOperatorExpression,
        ternayOperatorExpression)
in
    nodea(
        between(punctuator '(', punctuator ')',
            enumeration(
                op,
                optional next(
                    punctuator ',',
                    eager <| sepBy1(punctuator ',',
                        expression |> expected@"argument")))),
        \loc target args ->
            ?args
                :ast_expression.CurryExpression.create(loc, target, args)
                :target);

// Primary Expression
////////////////////////////////////////
primaryExpression = label@'Primary Expression' <|
    choice(
        letExpression,
        conditionalExpression,
        identifier,
        literal,
        arrayLiteral,
        objectLiteral,
        functionExpression,
        attempt operatorExpression,
        between(punctuator '(', punctuator ')',
            expression |> expected@"expression"));

// ArgumentList
////////////////////////////////////////
var argumentList = label@'Argument List' <|
    either(
        attempt node(
            operatorExpression,
            \loc x -> {
                var a = [x];
                a.loc = loc;
                return a;
            }),
        args);

// Accessor
////////////////////////////////////////
accessor = label@'Accessor' <|
    node(
        next(
            punctuator '.',
            either(
                identifier.map \ x -> [x, false],
                between(punctuator '(', punctuator ')',
                    expression |> expected@"accessor expression").map \x -> [x, true])),
        \loc [x computed] -> ({
            'loc': loc,
            'property': x,
            'computed': computed
        }));

// New Expression
////////////////////////////////////////
newExpression = label@'New Expression' <|
    nodea(
        next(
            keyword 'new',
            enumeration(
                memberExpression |> expected@"member expression",
                either(
                    args,
                    eager <| enumeration(curryExpression))
                    |> expected@"argument list")),
        ast_expression.NewExpression.create);

// Member Expression
////////////////////////////////////////
var accessorReducer = \p c -> 
    ast_expression.MemberExpression.create(
        SourceLocation.merge(p.loc, c.loc),
        p,
        c.property,
        c.computed);

memberExpression = label@'Member Expression' <|
    binds(
        enumeration(
            either(
                primaryExpression,
                newExpression),
            many <| memo accessor),
        foldl@accessorReducer \>> always);

// Lefthand side Expression
////////////////////////////////////////
var leftHandSideExpression = label@'Call Expression' <| let
    reducer = \p c ->
        ?c.hasOwnProperty('property')
            :ast_expression.MemberExpression.create(
                SourceLocation.merge(p.loc, c.loc),
                p,
                c.property,
                c.computed)
            :ast_expression.CallExpression.create(
                SourceLocation.merge(p.loc, c.loc),
                p,
                c)
in
    binds(
        enumeration(
            memberExpression,
            many <| either(argumentList, accessor)),
        foldl@reducer \>> always);

// Curry Expression
////////////////////////////////////////
curryExpression = label@'Curry Expression' <| let
    reducer = \f args -> 
        ast_expression.CurryExpression.create(
            SourceLocation.merge(f.loc, args.loc),
            f,
            [].concat(args))
in
    binds(
        enumeration(
            leftHandSideExpression,
            many next(
                punctuator '@',
                either(
                    argumentList,
                    leftHandSideExpression)
                |> expected@'curry argument')),
        foldl@reducer \>> always);

// Application Expression
////////////////////////////////////////
applicationExpression = label@'Call Expression' <|
    chainl1(
        always \p c ->
            ast_expression.CallExpression.create(
                SourceLocation.merge(p.loc, c.loc),
                p,
                [c]),
        curryExpression);

// Unary Expression
////////////////////////////////////////
unaryOperator = label@'Unary Operator' <|
    either(
        keyword('typeof', 'void'),
        tokenParser.unaryOperator);

unaryExpression = label@'Unary Expression' <| let
    reducer = \argument op -> 
        ast_expression.UnaryExpression.create(
            SourceLocation.merge(op.loc, argument.loc),
            op.value,
            argument)
in
    binds(
        enumeration(
            many unaryOperator,
            applicationExpression |> expected@"unary argument"),
        \ops, expression ->
            always(foldr(reducer, expression, ops)));

// Binary Expressions
////////////////////////////////////////
var precedenceTable = [
    {
        'sep': prefixedOp('*', '/', '%'),
        'precedence': 1,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp('+', '-'),
        'precedence': 2,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp('<<', '>>', '>>>'),
        'precedence': 3,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': either(
            prefixedOp('<', '>', '<=', '>='),
            keyword 'instanceof'),
        'precedence': 4,
        'node': ast_expression.BinaryExpression
    }, {
        'sep':  prefixedOp('==', '!=', '===', '!=='),
        'precedence': 5,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp '&',
        'precedence': 6,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp '^',
        'precedence': 7,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp '|',
        'precedence': 8,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp('\\>', '\\>>'),
        'precedence': 9,
        'right': true,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp('<\\', '<<\\'),
        'precedence': 9,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp '|>',
        'precedence': 10,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp '<|',
        'precedence': 10,
        'right': true,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': prefixedOp '||',
        'precedence': 11,
        'node': ast_expression.LogicalExpression
    }, {
        'sep': prefixedOp '&&',
        'precedence': 12,
        'node': ast_expression.LogicalExpression
    }
];

binaryExpression = label@'Binary Expression' <|
    precedence(
        memo unaryExpression,
        precedenceTable);

// Expression
////////////////////////////////////////
expression = binaryExpression;

// Left Hand Reference Expression
////////////////////////////////////////
leftHandReferenceExpression = label@'Left Hand Reference Expression' <|
    binds(
        enumeration(
            identifier,
            many <| memo accessor),
        foldl@accessorReducer \>> always);

var leftHandMemberReference = label@'Left Hand Reference Expression' <|
    binds(
        enumeration(
            identifier,
            many1 <| memo accessor),
        foldl@accessorReducer \>> always);

// Assignment Expression
////////////////////////////////////////
assignmentExpression = label@'Assignment Expression' <| rec\self ->
    nodea(
        append(
            attempt enumeration(
                leftHandReferenceExpression,
                punctuator('=', ':=')),
            enumeration(
                either(self, expression) |> expected@'expression')),
        \loc left op right ->
            ast_expression.AssignmentExpression.create(loc, op.value, left, right));

// Delete Expression
////////////////////////////////////////
var deleteExpression = label@'Delete Expression' <|
    node(
        next(
            keyword 'delete',
            leftHandMemberReference |> expected@'reference expression'),
        \loc expression ->
            ast_expression.UnaryExpression.create(loc, 'delete', expression));

// Top Level Expression
////////////////////////////////////////
topLevelExpression = choice(
    deleteExpression,
    assignmentExpression,
    expression);

}