/**
 * @fileOverview
 */
package (
    parserStream
    ParserPosition
    
    parseInput
    parseStream)
with
    import 'bennu::parse' parse#{ParserState},
    import 'nu-stream::stream' {
        filter
        isEmpty
        first
        'from': streamFrom},
    
    import 'khepri-ast::position' {SourceLocation SourcePosition},
    import './program_parser' {program}
in {

/* Stream
 ******************************************************************************/
/**
 * Maps a lex stream to a parse stream.
 * 
 * @param s Stream of tokens.
 * 
 * @return Stream suitable for parsing.
 */
parserStream := filter @ \x -> {
    switch (x.type) {
    case 'Whitespace':
    case 'LineTerminator':
    case 'Comment':
        return false;
    default:
        return true;
    }
};

/* Position
 ******************************************************************************/
ParserPosition := function \tokenPosition sourcePosition prevEnd =self-> {
    self.tokenPosition := tokenPosition;
    self.sourcePosition := sourcePosition;
    self.prevEnd := prevEnd;
};
ParserPosition.prototype = new parse.Position();
ParserPosition.prototype.constructor = ParserPosition;

ParserPosition.initial = new ParserPosition(
    parse.Position.initial,
    SourcePosition.initial,
    parse.Position.initial);

ParserPosition.prototype.increment = \tok r =self->
    new ParserPosition(
        self.tokenPosition.increment(tok),
        ?isEmpty r
            :tok.loc.end
            :first(r).loc.start,
        tok.loc.end);

ParserPosition.prototype.toString = \ =self->
    '' + self.sourcePosition;

ParserPosition.prototype.compare = \pos =self->
    self.tokenPosition.compare(pos.tokenPosition);

/* Running
 ******************************************************************************/
/**
 * Parses a lex stream into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param s Stream of tokens.
 * 
 * @return AST.
 */
parseStream := \s -> 
    parse.runState(
        program,
        new ParserState(
            parserStream s,
            ParserPosition.initial));

/**
 * Parses a lex array into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param input Array like object of tokens.
 * 
 * @return AST.
 */
parseInput := streamFrom \> parseStream;

}