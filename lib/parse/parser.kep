/**
 * @fileOverview
 */
package (
    parserStream
    
    parseInput
    parseStream)
with
    import 'bennu::parse' {
        ParserState
        runState},
    
    import 'nu-stream::stream' {
        filter
        'from'#streamFrom},
    
    import './program_parser' {program},
    import './parser_position' ParserPosition
in {

/* Stream
 ******************************************************************************/
/**
 * Maps a lex stream to a parse stream.
 * 
 * @param s Stream of tokens.
 * 
 * @return Stream suitable for parsing.
 */
parserStream := filter @ \x -> {
    switch (x.type) {
    case 'Whitespace':
    case 'LineTerminator':
    case 'Comment':
        return false;
    default:
        return true;
    }
};

/* Running
 ******************************************************************************/
/**
 * Parses a lex stream into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param s Stream of tokens.
 * 
 * @return AST.
 */
parseStream := \s -> 
    runState(
        program,
        new ParserState(
            parserStream s,
            ParserPosition.initial));

/**
 * Parses a lex array into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param input Array like object of tokens.
 * 
 * @return AST.
 */
parseInput := streamFrom \> parseStream;

}