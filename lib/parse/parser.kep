/**
 * @fileOverview
 */
package (
    parserStream
    ParserPosition
    ParserState
    
    parseInput
    parseStream)
with
    import 'bennu::parse' parse,
    import 'nu-stream::stream' stream#{first filter isEmpty rest NIL 'from': streamFrom},
    
    import '../position' {SourceLocation SourcePosition},
    import './program_parser' {program}
in {

/* Streams
 ******************************************************************************/
/**
 * Maps a lex stream to a parse stream.
 * 
 * @param s Stream of tokens.
 * 
 * @return Stream suitable for parsing.
 */
parserStream = filter @ \x -> {
    switch (x.type) {
    case 'Whitespace':
    case 'LineTerminator':
    case 'Comment':
        return false;
    default:
        return true;
    }
};

/* Position
 ******************************************************************************/
/**
 * Position in an ECMAScript parser.
 * 
 * Tracks position in lex stream and source positions.
 */
ParserPosition = function\tokenPosition, sourcePosition =self-> {
    self.tokenPosition = tokenPosition;
    self.sourcePosition = sourcePosition;
};
ParserPosition.prototype = new parse.Position();
ParserPosition.prototype.constructor = ParserPosition;

ParserPosition.initial = new ParserPosition(
    parse.Position.initial,
    SourcePosition.initial);

ParserPosition.prototype.increment = \tok, end =self->
    new ParserPosition(self.tokenPosition.increment(tok), end);

ParserPosition.prototype.toString = \() =self->
    '' + self.sourcePosition;

ParserPosition.prototype.compare = \pos =self->
    self.tokenPosition.compare(pos.tokenPosition);

/* State
 ******************************************************************************/
ParserState = function\input, pos, prevEnd =self-> {
    parse.ParserState.call(self, input, pos);
    self._prevEnd = prevEnd;
};
ParserState.prototype = new parse.ParserState();

ParserState.initial = new ParserState(NIL,
    ParserPosition.initial,
    SourcePosition.initial);

ParserState.prototype.setInput = \input =self->
    new ParserState(
        input,
        self.position,
        self._prevEnd);
    
ParserState.prototype.setPosition = \position =self->
    new ParserState(
        self.input,
        position,
        self._prevEnd);
    
ParserState.prototype.next = \tok =self-> {
    if (!self._next) {
        var r = rest self.input;
        var end =? isEmpty r
            :tok.loc.end
            :(first(r)).loc.start;
        var s = new ParserState(r, self.position.increment(tok, end), self.loc.end);
        self._next = \_, m, cok -> cok(tok, s, m);
    }
    return self._next;
};

Object.defineProperty(ParserState.prototype, 'loc', {
    'get': \() =self->
        ?isEmpty self.input
            :new SourceLocation(self._prevEnd, self._prevEnd)
            :(first(self.input)).loc
});

/* Running
 ******************************************************************************/
/**
 * Parses a lex stream into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param s Stream of tokens.
 * 
 * @return AST.
 */
parseStream = \s -> 
    parse.runState(
        program,
        new ParserState(
            parserStream s,
            ParserPosition.initial));

/**
 * Parses a lex array into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param input Array like object of tokens.
 * 
 * @return AST.
 */
parseInput = streamFrom \> parseStream;

}