/**
 * @fileOverview Khepri Statement parsers.
 */
package (
    blockStatement
    staticStatement
    variableStatement
    emptyStatement
    expressionStatement
    ifStatement
    withStatement
    iterationStatement
    continueStatement
    breakStatement
    returnStatement
    switchStatement
    throwStatement
    tryStatement
    debuggerStatement
    
    statement)
with
    import 'nu-stream::stream' {NIL},
    
    import 'bennu::parse' {
        append
        choice
        cons
        eager
        either
        enumeration
        expected
        many
        next
        optional
        label
        late},
    import 'bennu::lang' {
        between
        sepBy1
        then},
    
    import 'khepri-ast::clause' ast_clause,
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::statement' ast_statement,
    
    import './common' {
        node
        nodea},
    import './token_parser' {
        keyword
        punctuator},
    import './expression_parser' {
        expression
        topLevelExpression},
    import './pattern_parser' {
        importPattern
        topLevelPattern},
    import './value_parser' {identifier}
in {

/* Forward declarations
 ******************************************************************************/
statement = late\-> { return statement; };

/* Statement Parsers
 ******************************************************************************/
var logicalSemiColon = punctuator ';';

var statementList = eager <| many statement;

// Block Statement
////////////////////////////////////////
blockStatement = label@'Block Statement' <|
    node(
        between(punctuator '{', punctuator '}', 
            statementList),
        ast_statement.BlockStatement.create);

// Empty Statement
////////////////////////////////////////
emptyStatement = label@'Empty Statement' <|
    node(
        logicalSemiColon,
        ast_statement.EmptyStatement.create);

// Debugger Statement
////////////////////////////////////////
debuggerStatement = label@'Debugger Statement' <|
    node(
        next(
            keyword 'debugger',
            logicalSemiColon),
        ast_statement.DebuggerStatement.create);

// Expression Statement
////////////////////////////////////////
expressionStatement = label@'Expression Statement' <|
    node(
        then(
            topLevelExpression,
            logicalSemiColon),
        ast_statement.ExpressionStatement.create);

// Static Declaration Statement
////////////////////////////////////////
staticStatement = label@'Static Statement' <| let
    staticDeclaration = node(
        identifier,
        ast_declaration.StaticDeclarator.create),
    
    staticDeclarationList =
        eager sepBy1(punctuator ',',
            staticDeclaration)
in
    node(
        between(keyword 'static', logicalSemiColon,
            staticDeclarationList),
        ast_declaration.StaticDeclaration.create);

// Variable Declaration Statement
////////////////////////////////////////
var variableDeclarationList = let
    initialiser = enumeration(
        punctuator('=', ':=', '=:'),
        expression |> expected@"variable initilizer"),

    variableDeclaration = nodea(
        cons(
            identifier,
            optional(NIL, initialiser)),
        \loc id op init ->
            ast_declaration.VariableDeclarator.create(
                loc,
                id,
                init,
                op && (op.value === ':=' || op.value === '=:'),
                !(op && op.value === '=:')))
in
    eager sepBy1(punctuator ',',
        variableDeclaration);

variableStatement = label@'Variable Statement' <|
    node(
        between(keyword 'var', logicalSemiColon,
            variableDeclarationList),
        ast_declaration.VariableDeclaration.create);

// With Statement
////////////////////////////////////////
withStatement = label@'With Statement' <| let
    withIdentifier = topLevelPattern |> expected@"pattern",

    withBinding = either(
        importPattern,
        nodea(
            enumeration(
                withIdentifier,
                punctuator('=', '=:', ':='),
                expression),
            \loc pattern rec value ->
                ast_declaration.Binding.create(loc,
                    pattern,
                    value,
                    (rec.value === ':=')))),
    
    bindings =
        eager sepBy1(punctuator ',',
            withBinding)
in
    nodea(
        enumeration(
            between(keyword 'with', keyword 'in',
                bindings |> expected@"with bindings"),
            blockStatement),
        ast_statement.WithStatement.create);

// If Statement
////////////////////////////////////////
ifStatement = label@'If Statement' <| let
    test =
        between(punctuator '(', punctuator ')',
            expression |> expected@"if condition"),
    
    consequent = statement,
    
    alternate = next(keyword 'else', statement)
in
    nodea(
        next(
            keyword 'if',
            enumeration(
                test,
                statement,
                optional alternate)),
        ast_statement.IfStatement.create);

// Switch Statement
////////////////////////////////////////
switchStatement = label@'Switch Statement' <| let
    caseClause = nodea(
        enumeration(
            between(keyword 'case', punctuator ':',
                expression |> expected@"case test"),
            statementList),
        ast_clause.SwitchCase.create),

    defaultClause = node(
        next(
            keyword 'default',
            next(
                punctuator ':',
                statementList)),
        \loc, consequent -> ast_clause.SwitchCase.create(loc, null, consequent)),

    caseClauses = many caseClause,

    caseBlock = eager between(punctuator '{', punctuator '}',
        append(
            optional(NIL, caseClauses),
            optional(NIL, enumeration defaultClause)))
in
    nodea(
        next(
            keyword 'switch',
            enumeration(
                between(punctuator '(', punctuator ')',
                    expression |> expected@"switch discriminant"),
                caseBlock)),
        ast_statement.SwitchStatement.create);

// Iteration Statement
////////////////////////////////////////
var whileStatement = label@'While Statement' <| let
    condition =
        between(punctuator '(', punctuator ')',
            expression)
in
    nodea(
        next(
            keyword 'while',
            enumeration(
                condition,
                statement)),
        ast_statement.WhileStatement.create);

var doWhileStatement = label@'Do While Statement' <| let
    condition =
        between(punctuator '(', punctuator ')',
            expression)
in
    nodea(
        next(
            keyword 'do',
            enumeration(
                blockStatement,
                between(keyword 'while', logicalSemiColon,
                    condition))),
        ast_statement.DoWhileStatement.create);

var forStatement = label@'For Statement' <| let
    forInitExpression = either(
        node(
            next(
                keyword 'var',
                variableDeclarationList),
            ast_declaration.VariableDeclaration.create),
        topLevelExpression),
    
    forTestExpression = expression,
    
    forUpdateExpression = topLevelExpression
in
    nodea(
        next(
            keyword 'for',
            enumeration(
                next(
                    punctuator '(',
                    optional forInitExpression),
                next(
                    logicalSemiColon,
                    optional forTestExpression),
                next(
                    logicalSemiColon,
                    optional forUpdateExpression),
                next(
                    punctuator ')',
                    statement))),
        ast_statement.ForStatement.create);

iterationStatement = label@'Iteration Statement' <|
    choice(
        doWhileStatement,
        whileStatement,
        forStatement);

// Continue Statement
////////////////////////////////////////
continueStatement = label@'Continue Statement' <|
    node(
        next(
            keyword 'continue',
            logicalSemiColon),
        ast_statement.ContinueStatement.create);

// Break Statement
////////////////////////////////////////
breakStatement = label@'Break Statement' <|
    node(
        next(
            keyword 'break',
            logicalSemiColon),
        ast_statement.BreakStatement.create);

// Return Statement
////////////////////////////////////////
returnStatement = label@'Return Statement' <|
    node(
        between(keyword 'return', logicalSemiColon,
            optional expression),
        ast_statement.ReturnStatement.create);

// Throw Statement
////////////////////////////////////////
throwStatement = label@'Throw Statement'  <|
    node(
        between(keyword 'throw', logicalSemiColon,
            expression),
        ast_statement.ThrowStatement.create);

// Try Statement
////////////////////////////////////////
tryStatement = label@'Try Statement'  <| let
    catchBlock = nodea(
        next(
            keyword 'catch',
            enumeration(
                between(punctuator '(', punctuator ')',
                    identifier),
                blockStatement)),
        ast_clause.CatchClause.create),

    finallyBlock = next(
        keyword 'finally',
        blockStatement)
in
    nodea(
        next(
            keyword 'try',
            enumeration(
                blockStatement,
                optional catchBlock,
                optional finallyBlock)),
        ast_statement.TryStatement.create);

// Statement
////////////////////////////////////////
statement = label@'Statement' <|
    choice(
        blockStatement,
        staticStatement,
        variableStatement,
        emptyStatement,
        ifStatement,
        withStatement,
        iterationStatement,
        continueStatement,
        breakStatement,
        returnStatement,
        switchStatement,
        throwStatement,
        tryStatement,
        debuggerStatement,
        expressionStatement)
    |> expected@'statement';

}