/**
 * @fileOverview Khepri program parsers.
 */
package (
    sourceElement,
    sourceElements,
    program)
with
    import 'bennu::parse' {always, cons, eager, either, eof, many, next, label, rec late},
    import 'bennu::lang' {then},
    
    import 'nu-stream::stream' {NIL},
    
    import 'khepri-ast::program' ast_program,
    
    import './common' {node},
    import './statement_parser' _,
    import './package_parser' _
in {

/* Circular
 ******************************************************************************/
var statementParser = late\-> {
    with
        import './statement_parser' {statement}
    in {

        return statement;
    }
};

var khepriPackage = late\-> {
    with
        import './package_parser' {khepriPackage}
    in {
        return khepriPackage;
    }
};

/* labels
 ******************************************************************************/
/**
 * label for an ECMAScript source element.
 * 
 * Source Elements are top level nodes that makes up a program.
 */
sourceElement = statementParser;

/**
 * label for a enumeration of zero or more source elements.
 */
sourceElements = eager <| many sourceElement;

/**
 * label for an ECMAScript 5.1 program.
 */
program = label@'Program' <|
    node(
        either(
            then(khepriPackage, eof),
            eager <| (rec\self ->
                either(
                    next(eof, always NIL),
                    cons(sourceElement, self)))),
        ast_program.Program.create);

}