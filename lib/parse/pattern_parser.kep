/**
 * @fileOverview Khepri patterns parsers.
 */
package (
    listPattern
    listPattern0
    
    pattern
    unpack
    topLevelPattern
    
    identifierPattern
    operatorPattern
    sinkPattern
    ellipsisPattern
    
    importPattern
    arrayPattern
    
    objectPatternElement
    objectPattern
    
    asPattern)
with
    import 'bennu::parse' {
        attempt
        append
        bind
        binds
        choice
        cons
        eager
        either
        expected
        enumeration
        next
        optional
        rec
        label
        late},
    import 'bennu::lang' {
        between
        sepBy
        sepBy1
        sepEndBy
        then},
    
    import 'nu-stream::stream' {NIL},
    
    import 'khepri-ast::pattern' ast_pattern,
    
    import './common' {node nodea},
    import './token_parser' {keyword punctuator},
    import './value_parser' {
        identifier
        operator
        stringLiteral}
in {

var sepEndWith1 = \sep end p ->
    rec\self ->
        cons(
            p,
            optional(NIL,
                next(sep,
                    either(enumeration(end), self))));

var sepEndWith = \sep end p ->
    either(
        enumeration(end),
        sepEndWith1(sep, end, p));

var sepEndWith0 = \sep end p ->
    optional(NIL, sepEndWith(sep, end, p));

/* Forward
 ******************************************************************************/
topLevelPattern = late\-> { return topLevelPattern; };

unpack = late\-> { return unpack; };

asPattern = late\-> { return asPattern; };

/* Parts
 ******************************************************************************/
var sep = optional (punctuator ',');

/* Parts
 ******************************************************************************/
listPattern = \pre mid post  ->
    append(
        sepEndWith(sep, mid, pre),
        next(sep, sepBy(sep, post)));

listPattern0 = \pre mid post  ->
    append(
        sepEndWith0(sep, mid, pre),
        next(sep, sepBy(sep, post)));

/* Base Patterns
 ******************************************************************************/
// Identifier Pattern
////////////////////////////////////////
identifierPattern = label@'Identifier Pattern' <|
    identifier
        .map\x -> ast_pattern.IdentifierPattern.create(x.loc, x);

// Identifier Pattern
////////////////////////////////////////
operatorPattern = label@'Operator Pattern' <|
    operator
        .map\x -> ast_pattern.IdentifierPattern.create(x.loc, x);

// Sink Pattern
////////////////////////////////////////
sinkPattern = label@'Sink Pattern' <|
    keyword('_')
        .map\x -> ast_pattern.SinkPattern.create(x.loc);

/* Unpacks
 ******************************************************************************/
// Ellipsis Pattern
////////////////////////////////////////
ellipsisPattern = label@'Ellipsis Pattern' <|
    either(
        attempt <| between(punctuator '(', punctuator ')',
            punctuator '...')
            .map\x -> ast_pattern.EllipsisPattern.create(x.loc, null),
        
        node(
            next(
                punctuator '...',
                optional identifierPattern),
            ast_pattern.EllipsisPattern.create));

// Array Pattern
////////////////////////////////////////
arrayPattern = label@'Array Pattern' <| let
    element = topLevelPattern
in
    nodea(
        enumeration(
            optional(false, punctuator '?'),
            between(punctuator '[', punctuator ']',
                eager listPattern(
                    element |> expected@"array pattern element",
                    ellipsisPattern,
                    element |> expected@"non-ellipsis array pattern element"))),
        \loc checked elements ->
            ast_pattern.ArrayPattern.create(loc, elements, checked));

// Object Pattern
////////////////////////////////////////
objectPatternElement = either(
    nodea(
        enumeration(
            stringLiteral,
            next(
                punctuator(':', '#'),
                unpack)),
        ast_pattern.ObjectPatternElement.create),
    node(
        either(
            asPattern,
            identifierPattern),
        ast_pattern.ObjectPatternElement.create));

objectPattern = label@'Object Pattern' <|
    nodea(
        enumeration(
            optional(false, punctuator '?'),
            between(punctuator '{', punctuator '}',
                eager sepBy1(sep,
                    objectPatternElement |> expected@"object pattern element"))),
        \loc checked elements ->
            ast_pattern.ObjectPattern.create(loc, elements, checked));

// As Pattern
////////////////////////////////////////
asPattern = label@'As Pattern' <|
    nodea(
        enumeration(
            attempt then(
                identifierPattern,
                punctuator '#'),
            choice(
                arrayPattern,
                objectPattern)
                |> expected@'object or array pattern'),
        ast_pattern.AsPattern.create);

// Import Pattern
////////////////////////////////////////
importPattern = label@'Import Pattern' <|
    next(
        keyword 'import',
        nodea(
            enumeration(
                stringLiteral,
                topLevelPattern),
            ast_pattern.ImportPattern.create));

/* Patterns
 ******************************************************************************/
// Unpack
////////////////////////////////////////
unpack = label@'Unpack' <|
    choice(
        arrayPattern,
        objectPattern,
        asPattern,
        identifierPattern,
        operatorPattern);

// Top Level Pattern
////////////////////////////////////////
topLevelPattern = label@'Top Level Pattern' <|
    choice(
        sinkPattern,
        unpack);

}