/**
 * @fileOverview Khepri patterns parsers.
 */
package (
    pattern
    topLevelPattern
    
    identifierPattern
    sinkPattern
    ellipsisPattern
    
    importPattern
    arrayPattern
    objectPattern
    
    argumentList
    argumentsPattern
    
    asPattern)
with
    import 'bennu::parse' {
        attempt
        append
        bind
        binds
        choice
        cons
        eager
        either
        expected
        enumeration
        next
        optional
        rec
        label
        late},
    import 'bennu::lang' {between sepBy sepBy1 sepEndBy then},
    
    import 'nu-stream::stream' {NIL},
    
    import 'khepri-ast::pattern' ast_pattern,
    
    import './common' {node nodea},
    import './token_parser' {keyword punctuator},
    import './value_parser' {identifier stringLiteral}
in {

var sepEndWith1 = \sep end p ->
    rec\self ->
        cons(
            p,
            optional(NIL,
                next(sep,
                    either(enumeration(end), self))));

var sepEndWith = \sep end p ->
    either(
        enumeration(end),
        sepEndWith1(sep, end, p));

/* Forward
 ******************************************************************************/
topLevelPattern = late\-> { return topLevelPattern; };

asPattern = late\-> { return asPattern; };

objectPattern = late\-> { return objectPattern; };

/* Parts
 ******************************************************************************/
var sep = optional(null, punctuator ',');

/* Base Patterns
 ******************************************************************************/
// Identifier Pattern
////////////////////////////////////////
identifierPattern = label@'Identifier Pattern' <|
    identifier
        .map\x -> ast_pattern.IdentifierPattern.create(x.loc, x);

// Sink Pattern
////////////////////////////////////////
sinkPattern = label@'Sink Pattern' <|
    keyword('_')
        .map\x -> ast_pattern.SinkPattern.create(x.loc);

/* Unpacks
 ******************************************************************************/
// Ellipsis Pattern
////////////////////////////////////////
ellipsisPattern = label@'Ellipsis Pattern' <|
    node(
        next(
            punctuator('...'),
            identifierPattern),
        ast_pattern.EllipsisPattern.create);

// Array Pattern
////////////////////////////////////////
arrayPattern = label@'Array Pattern' <| let
    element = topLevelPattern,
    
    pre = sepEndWith(sep,
        ellipsisPattern,
        element |> expected@"array pattern element"),
    
    post = sepBy(sep,
        element |> expected@"non-ellipsis array pattern element")
in
    node(
        between(punctuator '[', punctuator ']',
            eager <| append(pre, next(sep, post))),
        ast_pattern.ArrayPattern.create);

// Object Pattern
////////////////////////////////////////
var objectPatternElement = either(
    nodea(
        enumeration(
            stringLiteral,
            next(
                punctuator ':',
                choice(
                    arrayPattern,
                    objectPattern,
                    asPattern,
                    identifierPattern))),
        ast_pattern.ObjectPatternElement.create),
    node(
        either(
            asPattern,
            identifierPattern),
        \loc, key -> ast_pattern.ObjectPatternElement.create(loc, key, null)));

objectPattern = label@'Object Pattern' <|
    node(
        between(punctuator '{', punctuator '}',
            eager <| sepBy1(sep,
                objectPatternElement |> expected@"object pattern element")),
        ast_pattern.ObjectPattern.create);

// As Pattern
////////////////////////////////////////
asPattern = label@'As Pattern' <|
    nodea(
        enumeration(
            attempt <| then(
                identifierPattern,
                punctuator '#'),
            choice(
                arrayPattern,
                objectPattern)
                |> expected@'object or array pattern'),
        ast_pattern.AsPattern.create);

// Import Pattern
////////////////////////////////////////
importPattern = label@'Import Pattern' <|
    next(
        keyword 'import',
        nodea(
            enumeration(
                stringLiteral,
                topLevelPattern),
            ast_pattern.ImportPattern.create));

/* Patterns
 ******************************************************************************/
// Top Level Pattern
////////////////////////////////////////
topLevelPattern = label@'Top Level Pattern' <|
    choice(
        sinkPattern,
        arrayPattern,
        objectPattern,
        asPattern,
        identifierPattern);

// Arguments Pattern
////////////////////////////////////////
var argumentElements = eager <| sepBy(sep, topLevelPattern);

var selfPattern = next(
    punctuator '=',
    choice(
        arrayPattern,
        objectPattern,
        asPattern,
        identifierPattern));

argumentList = label@'Argument List' <|
    nodea(
        enumeration(
            argumentElements,
            optional(null, selfPattern)),
        \loc, elements, self ->
            ast_pattern.ArgumentsPattern.create(loc, null, elements, self));

argumentsPattern = label@'Arguments Pattern' <|
    either(
        nodea(
            enumeration(
                attempt <| then(
                    optional(null, identifierPattern),
                    punctuator '('),
                then(
                    argumentElements,
                    punctuator ')'),
                optional(null, selfPattern)),
            ast_pattern.ArgumentsPattern.create),
        argumentList);

// Pattern
////////////////////////////////////////
pattern = label@'Pattern' <|
    choice(
        importPattern,
        topLevelPattern);

}