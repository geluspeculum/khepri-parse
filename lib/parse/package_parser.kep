/**
 * @fileOverview Khepri package parsers.
 */
package (
    khepriPackage)
with
    import 'bennu::parse' {eager, either, enumeration, expected, next, optional, Parser},
    import 'bennu::lang' {between, sepBy},
    import 'khepri-ast::package' ast_package,
    
    import './common' {node, nodea},
    import './token_parser' {keyword, punctuator},
    import './value_parser' {identifier},
    import './statement_parser' _
in {

/* Circular
 ******************************************************************************/
var withStatement = \args(...) -> {
    with
        import './statement_parser' {withStatement}
    in {
        return withStatement.apply(undefined, args);
    }
};

var blockStatement = \args(...) -> {
    with
        import './statement_parser' {blockStatement}
    in {
        return blockStatement.apply(undefined, args);
    }
};

/* Parsers
 ******************************************************************************/
var packageExport = Parser@'Package Export' <|
    node(
        identifier,
        ast_package.PackageExport.create);

var packageExports = Parser@'Package Exports' <|
    node(
        between(punctuator '(', punctuator ')', 
            eager <| sepBy(optional(null, punctuator ','),
                packageExport)),
        ast_package.PackageExports.create);

var packageBody = Parser@'Package Body' <|
    either(
        withStatement,
        blockStatement);

khepriPackage = Parser@'Package' <|
    nodea(
        next(
            keyword 'package',
            enumeration(
                packageExports |> expected@'package export list',
                packageBody)),
            ast_package.Package.create);

}