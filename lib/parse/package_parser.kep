/**
 * @fileOverview Package parsers.
 */
package (
    packageExport
    packageExports
    
    packageBody
    
    khepriPackage)
with
    import 'bennu::parse' {
        attempt
        eager
        either
        enumeration
        expected
        next
        optional
        label
        late},
    import 'bennu::lang' {between sepBy},
    import 'khepri-ast::package' ast_package,
    
    import './common' {
        node
        nodea},
    import './token_parser' {
        keyword
        punctuator},
    import './value_parser' {
        identifier
        stringLiteral
        operator
        symbol},
    import './statement_parser' {withStatement blockStatement},
    import './pattern_parser' {identifierPattern}

in {

/* Package Exports
 ******************************************************************************/
var simplePackageExport :=
    node(
        symbol,
        ast_package.PackageExport.create);

var aliasedPackageExport :=
    nodea(
        enumeration(
            either(
                stringLiteral,
                identifierPattern),
            next(
                punctuator (':', '#'),
                identifier)),
        \loc alias id ->
            ast_package.PackageExport.create(loc, id, alias));

packageExport := label@'Package Export' <|
    either(
        attempt aliasedPackageExport,
        simplePackageExport);

var packageExportList := label@'Package Export List' <|
    node(
        between(punctuator '(', punctuator ')', 
            eager sepBy(optional (punctuator ','), packageExport)),
        ast_package.PackageExports.create);

packageExports := label@'Package Exports' <|
    either(
        attempt simplePackageExport,
        packageExportList);

/* Package
 ******************************************************************************/
packageBody := label@'Package Body' <|
    either(
        withStatement,
        blockStatement);

khepriPackage := label@'Package' <|
    nodea(
        next(
            keyword 'package',
            enumeration(
                packageExports |> expected@"package exports",
                packageBody |> expected@"package body")),
            ast_package.Package.create);

}