/**
 * @fileOverview Package parsers.
 */
package (
    khepriPackage)
with
    import 'bennu::parse' {
        attempt
        eager
        either
        enumeration
        expected
        next
        optional
        label
        late},
    import 'bennu::lang' {between sepBy},
    import 'khepri-ast::package' ast_package,
    
    import './common' {
        node
        nodea},
    import './token_parser' {
        keyword
        punctuator},
    import './value_parser' {
        identifier
        stringLiteral
        operator},
    import './statement_parser' {withStatement blockStatement}
in {

var symbol := either(
    identifier,
    operator);

/* labels
 ******************************************************************************/
var packageExport = label@'Package Export' <|
    either(
        node(
            symbol,
            ast_package.PackageExport.create),
        nodea(
            enumeration(
                stringLiteral,
                next(
                    punctuator ':',
                    identifier)),
            \loc alias id ->
                ast_package.PackageExport.create(loc, id, alias)));

var packageExportList = label@'Package Export List' <|
    node(
        between(punctuator '(', punctuator ')', 
            eager <| sepBy(optional (punctuator ','),
                packageExport)),
        ast_package.PackageExports.create);

var packageExports = label@'Package Exports' <|
    either(
        node(
            attempt symbol,
            ast_package.PackageExport.create),
        packageExportList);

var packageBody = label@'Package Body' <|
    either(
        withStatement,
        blockStatement);

khepriPackage = label@'Package' <|
    nodea(
        next(
            keyword 'package',
            enumeration(
                packageExports |> expected@"package exports",
                packageBody |> expected@"package body")),
            ast_package.Package.create);

}