/**
 * @fileOverview 
 */
package (
    precedence,
    node,
    nodea,
    positionParser)
with
    import 'bennu::parse' parse#{
        always
        bind
        binds
        extract
        enumeration
        eager
        optional},
    import 'nu-stream::stream' stream#{NIL},

    import '../position' {SourceLocation}
in {

// Operator Precedence
////////////////////////////////////////
precedence = \p, table -> {
    var sep = parse.choicea(
        table.map(\entry ->
            bind(entry.sep, \{value} ->
                always({
                    'value': value,
                    'node': entry.node,
                    'precedence': entry.precedence,
                    'right': entry.right
                }, value))));
    
    return bind(
        eager <| parse.rec(\self ->
            parse.cons(p,
                optional(NIL,
                    parse.cons(sep,
                        parse.expected("binary expression", self))))),
        \list -> {
            var stack = [],
                out = [];
            
            while (list.length > 0) {
                var tok = list.shift();
                if (tok.type) {
                    out.push(tok);
                } else {
                    while (stack.length > 0) {
                        var o2 = stack.(stack.length - 1);
                        if ((!tok.right && o2.precedence === tok.precedence) ||
                          (o2.precedence < tok.precedence)) {
                            stack.pop();
                            var rt = out.pop(),
                                lf = out.pop();
                            
                            out.push(new (o2.node)(SourceLocation.merge(lf.loc, rt.loc), o2.value, lf, rt));
                        } else {
                            break;
                        }
                    }
                    stack.push(tok);
                }
            }
            
            while (stack.length > 0){
                var o = stack.pop();
                var rt = out.pop(),
                    lf = out.pop();
                out.push(new (o.node)(SourceLocation.merge(lf.loc, rt.loc), o.value, lf, rt));
            }
            
            return always(out.pop());
        });
};

// State Interaction
////////////////////////////////////////
positionParser = extract \{position} -> position.sourcePosition;

var prevEnd = extract \{position} -> position.prevEnd;

// Ast Node
////////////////////////////////////////
node = \p, f ->
    binds(
        enumeration(
            positionParser,
            p,
            prevEnd),
        \o, x, c ->
            always <| f(new SourceLocation(o, c), x));

nodea = \p, f ->
    binds(
        enumeration(
            positionParser,
            p,
            prevEnd),
        \o, x, c ->
            always <| f.apply(undefined, stream.toArray(stream.cons(new SourceLocation(o , c), x))));

}