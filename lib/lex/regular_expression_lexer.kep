/**
 * @fileOverview Khepri regular expression lexers.
 */
package (
    regularExpressionNonTerminator,
    regularExpressionBackslashSequence,
    
// Class
    regularExpressionClassChar,
    regularExpressionClassChars,
    regularExpressionClass,
    
// Characters
    regularExpressionChar,
    regularExpressionChars,
    regularExpressionFirstChar,
    
// Parts
    regularExpressionFlags,
    regularExpressionBody,
    
// Regex Literal
    regularExpressionLiteral)
with
    import 'bennu::parse' {
        always
        anyToken
        binds
        choice
        cons
        either
        enumeration
        many
        map
        next
        not
        label},
    import 'bennu::lang' {between},
    import 'bennu::text' {character noneOf},
    
    import './common' {join},
    import './identifier_lexer' {identifierPart},
    import './line_terminator_lexer' {lineTerminator}
in {

/* Parts
 ******************************************************************************/
regularExpressionNonTerminator =
    next(
        not lineTerminator,
        anyToken);

regularExpressionBackslashSequence :=
    next(
        character '\\',
        map(
            (+ '\\'),
            regularExpressionNonTerminator));

/* Class
 ******************************************************************************/
regularExpressionClassChar := either(
    next(
        not lineTerminator,
        noneOf ']\\'),
    regularExpressionBackslashSequence);

regularExpressionClassChars := many regularExpressionClassChar;

regularExpressionClass :=
    between(character '[', character ']', 
        map(
            \body ->
                '[' + body + ']',
            join regularExpressionClassChars));

/* Characters
 ******************************************************************************/
regularExpressionFirstChar :=
    choice(
        next(
            not lineTerminator,
            noneOf '*\\`['),
        regularExpressionBackslashSequence,
        regularExpressionClass);

regularExpressionChar :=
    choice(
        next(
            not lineTerminator,
            noneOf '\\`['),
        regularExpressionBackslashSequence,
        regularExpressionClass);

regularExpressionChars := many regularExpressionChar;

/* Literal
 ******************************************************************************/
regularExpressionFlags := many identifierPart;

regularExpressionBody :=
    cons(
        regularExpressionFirstChar,
        regularExpressionChars);

/**
 * Regular expression literal.
 */
regularExpressionLiteral := label@'Regular Expression Lexer' <|
    binds(
        enumeration(
            between(character '`', character '`',
                join regularExpressionBody),
            join regularExpressionFlags),
        \body flags -> always(new RegExp(body, flags)));

}