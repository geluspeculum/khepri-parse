/**
 * @fileOverview Khepri regular expression lexers.
 */
package (
    regularExpressionNonTerminator,
    regularExpressionBackslashSequence,
    
// Class
    regularExpressionClassChar,
    regularExpressionClassChars,
    regularExpressionClass,
    
// Characters
    regularExpressionChar,
    regularExpressionChars,
    regularExpressionFirstChar,
    
// Parts
    regularExpressionFlags,
    regularExpressionBody,
    
// Regex Literal
    regularExpressionLiteral)
with
    import 'bennu::parse' {
        always,
        attempt,
        bind,
        binds,
        choice,
        cons,
        either,
        enumeration,
        many,
        next,
        Parser,
        token,
        test},
    import 'bennu::lang' {between},
    import 'bennu::text' {character},
    import 'nu-stream::stream' {foldl},
    import './identifier_lexer' {identifierPart},
    import './line_terminator_lexer' {lineTerminator}
in {

var join = foldl@((+), '');

/* Lexers
 ******************************************************************************/
// Parts
////////////////////////////////////////
/**
 * Lexer for non terminator character in a regular expression.
 */
regularExpressionNonTerminator = token(
    (!) <\ test@lineTerminator);

/**
 * Lexer for regular expression backslash sequence.
 */
regularExpressionBackslashSequence = next(
    character '\\',
    bind(
        regularExpressionNonTerminator,
        (+)@('\\') \> always));

// Class
////////////////////////////////////////
regularExpressionClassChar = either(
    attempt <| token(\tok ->
        !test(lineTerminator, tok) &&
            tok !== ']' && tok !== '\\'),
    regularExpressionBackslashSequence);

regularExpressionClassChars = many(regularExpressionClassChar);

regularExpressionClass = between(character '[', character ']', 
    bind(regularExpressionClassChars, \body ->
        always('[' + join(body) + ']')));

// Characters
////////////////////////////////////////
/**
 * Lexer for first character of a regular expression.
 */
regularExpressionFirstChar = choice(
    token(
        \tok ->
            !test(lineTerminator, tok) &&
                tok !== '*' && tok !== '\\' && tok !== '`' && tok !== '['),
    regularExpressionBackslashSequence,
    regularExpressionClass);

/**
 * Lexer for a character in a regular expression.
 */
regularExpressionChar =  choice(
    token(
        \tok ->
            !test(lineTerminator, tok) &&
                tok !== '\\' && tok !== '`' && tok !== '['),
    regularExpressionBackslashSequence,
    regularExpressionClass);

/**
 * Lexer for string of regular expression chars.
 */
regularExpressionChars = many regularExpressionChar;

// Literal Parts
////////////////////////////////////////
/**
 * Lexer for regular expression flags.
 */
regularExpressionFlags = many identifierPart;

/**
 * Lexer for the body of a regular expression
 */
regularExpressionBody = bind(
    cons(regularExpressionFirstChar, regularExpressionChars),
    join \> always);

// Literal
////////////////////////////////////////
/**
 * Lexer for regular expression literals.
 */
regularExpressionLiteral = Parser@'Regular Expression Lexer' <|
    binds(
        enumeration(
            between(character '`', character '`',
                regularExpressionBody),
            regularExpressionFlags),
        \body, flags -> always(new RegExp(body, join(flags))));

}