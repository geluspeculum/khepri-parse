/**
 * @fileOverview Khepri string literal lexers.
 */
package (
// Constants
    doubleQuote
    escape
    singleQuote
    lineContinuation
    
// Escape Sequences
    unicodeEscapeSequence
    hexEscapeSequence
    characterEscapeSequence
    escapeSequence
    
// Single String Literal
    singleStringCharacter
    singleStringCharacters
    singleStringLiteral
    
// Double String Literal
    doubleStringCharacter
    doubleStringCharacters
    doubleStringLiteral
    
// Literal
    stringLiteral)
with
    import 'bennu::parse' {
        always
        attempt
        bind
        choice
        either
        eof
        many
        map
        not
        next
        sequence
        label
        anyToken},
    import 'bennu::text' {
        character
        oneOf
        noneOf},
    import 'bennu::lang' {between times},
    
    import './line_terminator_lexer' {
        lineTerminatorSequence
        lineTerminator},
    import './number_lexer' {
        decimalDigit
        hexDigit},
    
    import './common' {join} 
in {

var fromCharCode := map @ \x ->
    String.fromCharCode(parseInt(x, 16));

/* Constants
 ******************************************************************************/
doubleQuote := character '"';

singleQuote := character "'";

escape := character '\\';

lineContinuation :=
    sequence(
        escape,
        lineTerminatorSequence,
        always '');

/* Escape Character
 ******************************************************************************/
var singleEscapeCharacter :=
    oneOf('"\'\\bfnrtv')
        .map (., {
            '"': '"',
            "'": "'",
            '\\': '\\',
            'b': '\u0008',
            'f': '\u000C',
            'n': '\u000A',
            'r': '\u000D',
            't': '\u0009',
            'v': '\u000B' });

var escapeCharacter :=
    choice(
        singleEscapeCharacter,
        decimalDigit,
        oneOf 'ux');

var nonEscapeCharacter :=
    sequence(
        not escapeCharacter,
        not lineTerminator,
        anyToken);

/* Escape Sequence
 ******************************************************************************/
hexEscapeSequence :=
    next(
        character 'x',
        hexDigit |> times@2 |> join |> fromCharCode);

unicodeEscapeSequence :=
    next(
        character 'u',
        hexDigit |> times@4 |> join |> fromCharCode);

characterEscapeSequence :=
    either(
        singleEscapeCharacter,
        nonEscapeCharacter);

escapeSequence :=
    choice(
        characterEscapeSequence,
        sequence(
            character '0',
            not decimalDigit,
            always '\u0000'),
        hexEscapeSequence,
        unicodeEscapeSequence);

/* Single String Literal
 ******************************************************************************/
singleStringCharacter := label@'Single String Character' <|
    choice(
        attempt lineContinuation,
        next(escape, escapeSequence),
        next(
            not lineTerminator,
            noneOf "'\\"));

singleStringCharacters := many singleStringCharacter;

/**
 * Single quoted string literal.
 * 
 * @return Text enclosed in the single quoted string literal.
 */
singleStringLiteral := label@'Single String Literal' <|
    between(singleQuote, singleQuote,
        join singleStringCharacters);

/* Double String Literal
 ******************************************************************************/
doubleStringCharacter :=
    choice(
        attempt lineContinuation,
        next(escape, escapeSequence),
        next(
            not lineTerminator,
            noneOf '"\\'));

doubleStringCharacters := many doubleStringCharacter;

/**
 * Double quoted string literal.
 * 
 * @return Text enclosed in the double quoted string literal.
 */
doubleStringLiteral := label@'Double String Literal' <|
    between(doubleQuote, doubleQuote,
        join doubleStringCharacters);

/* String Literal
 ******************************************************************************/
/**
 * String literal.
 * 
 * @return Text enclosed in the string literal.
 */
stringLiteral := label@'Sting Literal Lexer' <|
    either(
        singleStringLiteral,
        doubleStringLiteral);

}