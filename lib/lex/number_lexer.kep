/**
 * @fileOverview Khepri number lexers
 */
package (
// Constants
    decimal
    negativeSign
    positiveSign
    exponentIndicator
    hexIndicator

// Digits
    decimalDigit
    nonZeroDigit
    hexDigit
    decimalDigits
    hexDigits

// Integer
    unsignedInteger
    signedInteger

// Part
    exponentPart

// Literals
    hexIntegerLiteral
    decimalIntegerLiteral
    decimalLiteral

    numericLiteral)
with
    import 'bennu::parse' {
        always
        attempt
        bind
        binds
        choice
        either
        enumeration
        expected
        many
        many1
        next
        optional
        Parser},
    import 'bennu::lang' {then},
    import 'bennu::text' {character characters match string},
    import 'nu-stream::stream' {foldl}
in {

var join = \p ->
    bind(p, foldl@((+), '') \> always);

/* Lexers
 ******************************************************************************/
// Constants
////////////////////////////////////////
decimal = Parser('Decimal Lexer',
    character '.');

negativeSign = Parser('Negative Sign Lexer',
    character '-');

positiveSign = Parser('Positive Sign Lexer',
    character '+');

exponentIndicator = Parser('Exponent Indicator Lexer',
    characters('eE'));

hexIndicator = Parser@'Hex Indicator Lexer' <|
    either(
        string '0x',
        string '0X');

// Digits
////////////////////////////////////////
decimalDigit = Parser('Decimal Digit Lexer',
    characters('0123456789'));

nonZeroDigit = Parser('Non Zero Digit Lexer',
    characters('123456789'));

hexDigit = Parser('Hex Digit Lexer',
    characters('0123456789abcdefABCDEF'));

// Strings
////////////////////////////////////////
decimalDigits = Parser@'Decimal Digits Lexer' <|
    join <| many1(decimalDigit);

hexDigits = Parser@'Hex Digits Lexer' <|
    join <| many1(hexDigit);

// Integers
////////////////////////////////////////
unsignedInteger = Parser@'Unsigned Integer Lexer' <|
    bind(
        decimalDigits,
        parseInt \> always);


signedInteger = Parser@'Signed Integer Lexer' <|
    either(
        next(
            negativeSign,
            bind(
                unsignedInteger,
                (--) \> always)),
        next(
            optional(null, positiveSign),
            unsignedInteger));

var hexIntegerLiteralDigits = Parser@'Hex Integer Literal Digits Lexer' <|
    bind(
        hexDigits,
        \num -> always(parseInt(num, 16)));

// Parts
////////////////////////////////////////
exponentPart = Parser@'Exponent Part Lexer' <|
    next(
        exponentIndicator,
        signedInteger);

// Literals
////////////////////////////////////////
hexIntegerLiteral = Parser@'Hex Integer Literal Lexer' <|
    next(
        hexIndicator,
        hexIntegerLiteralDigits);

decimalIntegerLiteral = Parser@'Decimal Integer Literal' <|
    bind(
        decimalDigits,
        parseInt \> always);

/**
 * A decimal number literal.
 * 
 * Either a integer or a decimal number. Before or after the decimal must contain
 * at least one number. May contain an exponent value at the end.
 * 
 * @return Number value of the input.
 */
decimalLiteral = Parser@'Decimal Literal Lexer' <|
    binds(
        enumeration(
            binds(
                enumeration(
                    decimalDigits,
                    optional(0,
                        attempt(next(
                            decimal,
                            decimalDigits)))),
                \whole, fractional ->
                    always(parseFloat(whole + '.' + fractional))),
            optional(0, exponentPart)),
        \num, exp ->
            always(num * Math.pow(10, parseInt(exp))));

/**
 * Literal for any numeric value
 * 
 * @return Number value of the input.
 */
numericLiteral = Parser@'Numeric Literal Lexer' <|
    either(
        next(
            attempt <| hexIndicator,
            hexIntegerLiteralDigits |> expected@'hex digits'),
        decimalLiteral);

}