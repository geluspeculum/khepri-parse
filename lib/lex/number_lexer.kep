/**
 * @fileOverview Khepri number lexers
 */
package (
// Constants
    decimal
    negativeSign
    positiveSign
    exponentIndicator
    hexIndicator

// Digits
    decimalDigit
    nonZeroDigit
    hexDigit
    decimalDigits
    hexDigits

// Integer
    unsignedInteger
    signedInteger

// Part
    exponentPart

// Literals
    hexIntegerLiteral
    decimalIntegerLiteral
    decimalLiteral

    numericLiteral)
with
    import 'bennu::parse' {
        always
        attempt
        binds
        either
        enumeration
        expected
        many1
        map
        next
        optional
        label},
    import 'bennu::text' {
        character
        oneOf
        string},
    import 'nu-stream::stream' {foldl}
in {

var join = map @ (foldl @ (+) @ '');

/* Lexers
 ******************************************************************************/
// Constants
////////////////////////////////////////
decimal = character '.';

negativeSign = character '-';

positiveSign = character '+';

exponentIndicator = oneOf 'eE';

hexIndicator =
    either(
        string '0x',
        string '0X');

// Digits
////////////////////////////////////////
decimalDigit = oneOf '0123456789';

nonZeroDigit = oneOf '123456789';

hexDigit = oneOf '0123456789abcdefABCDEF';

// Strings
////////////////////////////////////////
decimalDigits = label('Decimal Digits Lexer',
    join <| many1 decimalDigit);

hexDigits = label('Hex Digits Lexer',
    join <| many1 hexDigit);

// Integers
////////////////////////////////////////
unsignedInteger = label@'Unsigned Integer Lexer' <|
    map(
        parseInt,
        decimalDigits);

signedInteger = label@'Signed Integer Lexer' <|
    either(
        next(
            negativeSign,
            map(
                (--),
                unsignedInteger)),
        next(
            optional positiveSign,
            unsignedInteger));

var hexIntegerLiteralDigits = label@'Hex Integer Literal Digits Lexer' <|
    map(
        \num -> parseInt(num, 16),
        hexDigits);

// Parts
////////////////////////////////////////
exponentPart = label@'Exponent Part Lexer' <|
    next(
        exponentIndicator,
        signedInteger);

// Literals
////////////////////////////////////////
hexIntegerLiteral = label@'Hex Integer Literal Lexer' <|
    next(
        hexIndicator,
        hexIntegerLiteralDigits);

decimalIntegerLiteral = label@'Decimal Integer Literal' <|
    map(
        parseInt,
        decimalDigits);

/**
 * Decimal number literal.
 * 
 * Either a integer or a decimal number. Before or after the decimal must contain
 * at least one number. May contain an exponent value at the end.
 * 
 * @return Number value of the input.
 */
decimalLiteral = label@'Decimal Literal Lexer' <|
    binds(
        enumeration(
            binds(
                enumeration(
                    decimalDigits,
                    optional(0,
                        attempt <| next(
                            decimal,
                            decimalDigits))),
                \whole fractional ->
                    always(parseFloat(whole + '.' + fractional))),
            optional(0, exponentPart)),
        \num, exp ->
            always(num * Math.pow(10, parseInt(exp))));

/**
 * Literal for any numeric value
 * 
 * @return Number value of the input.
 */
numericLiteral = label@'Numeric Literal Lexer' <|
    either(
        next(
            attempt hexIndicator,
            hexIntegerLiteralDigits |> expected@'hex digits'),
        decimalLiteral);

}