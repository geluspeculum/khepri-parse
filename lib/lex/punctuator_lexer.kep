/**
 * @fileOverview Khepri punctuator lexers.
 */
package (
    punctuator
    
    prefixOperator
    infixOperator
    
    operator)
with
    import 'bennu::parse' {
        always
        attempt
        label
        eager
        either
        enumeration
        map
        many
        next
        not},
    import 'bennu::text' {
        trie
        character
        oneOf},
    import 'bennu::lang' {
        then},
    import 'nu-stream::stream' {foldl}
in {

var join := map @ (foldl @ (+) @ '');

/* Lexers
 ******************************************************************************/
var operatorChar := oneOf '?+-*/%|&^<>=!~@';

// Punctuator
////////////////////////////////////////
var punctuators := [
    '{', '}', '(', ')', '[', ']',
    ',',  '.', ';', ':',
    '?',
    '=', ':=', '=:',
    '@',
    '...', '#',
    '\\', '->', 'ยง',
    '-|', '|-'];

punctuator = label @ 'Punctuator Lexer' <|
    trie punctuators;

// Prefix Operator
////////////////////////////////////////
prefixOperator := label @ 'Prefix Operator Lexer' <|
    eager enumeration(
        either(
            trie ['~', '++', '--'],
            attempt then(character '!', not (character '='))),
        join <| many operatorChar);

// Infix Operator
////////////////////////////////////////
infixOperator = label @ 'Infix Operator Lexer' <|
    next(
        not next(
            trie ['->', '-|', '|-'],
            not operatorChar),
        eager enumeration(
            trie [
                '&&', '||', '??',
                '<<', '>>', '>>>',
                '<', '>',
                '==', '!=',
                '&', '|', '^',
                '+', '-', '*', '/', '%',
                '|>', '<|',
                '\\>', '\\>>', '<\\', '<<\\'],
            join <| many operatorChar));

// Operator
////////////////////////////////////////
operator = label @ 'Prefix Operator Lexer' <|
    either(
        prefixOperator,
        infixOperator);

}