/**
 * @fileOverview Khepri puctuator lexers.
 */
package (
// Brackets and Braces
    openBrace
    closeBrace
    openParenthesis
    closeParenthesis
    openBracket
    closeBracket
// Separators
    period
    semicolon
    comma
    colon
    questionMark
    
// Operators
    logicalAnd
    logicalOr

    leftShift
    signedRightShift
    unsignedRightShift

    lessThanOrEqualTo
    lessThan
    greaterThanOrEqualTo
    greaterThan

    strictEquals
    strictDoesNotEqual
    equals
    doesNotEqual
    
    and
    or
    xor
    
    assign

    logicalNot
    bitwiseNot

    addition
    subtration
    
    multiplication
    mod
    division

    compose
    composeNary
    reverseCompose
    reverseComposeNary
    
    pipe
    reversePipe
    
// Pattern
    ellipsis
    as
    
// lambda
    argumentList
    lambda

// Punctuators
    punctuator)
with
    import 'bennu::parse' {Parser},
    import 'bennu::text' {character string trie}
in {

var punctuators = [
    '{', '}', '(', ')', '[', ']',
    ',',  '.', ';', ':',
    '?', '&&', '||',
    '<<', '>>', '>>>',
    '<=', '<', '>=', '>',
    '===', '!==', '==', '!=',
    '=', ':=', '=:',
    '!', '~', '++', '--',
    '&', '|', '^', 
    '+', '-', '*', '/', '%',
    '@',
    '\\>', '\\>>', '<\\', '<<\\',
    '|>', '<|',
    '...', '#',
    '\\', '->', '<-'];

/* Lexers
 ******************************************************************************/
// Brackets and Braces
////////////////////////////////////////
openBrace = character '{';
closeBrace = character '}';

openParenthesis = character '(';
closeParenthesis = character '';

openBracket= character '[';
closeBracket= character ']';

// Separators
////////////////////////////////////////
period = character '.';

semicolon = character ';';

comma = character ',';

colon = character ':';

// Operators
////////////////////////////////////////
questionMark = character '?';

logicalAnd = string '&&';
logicalOr = string '||';

leftShift = string '<<';
signedRightShift = string '>>';
unsignedRightShift = string '>>>';

lessThanOrEqualTo = string '<=';
lessThan = character '<';

greaterThanOrEqualTo = string '>=';
greaterThan = character '>';

strictEquals = string '===';
strictDoesNotEqual = string '!==';

equals = string '==';
doesNotEqual = string '!=';

assign = character '=';

logicalNot = character '!';
bitwiseNot = character '~';

and = character '&';
or = character '|';
xor = character '^';

addition = character '+';
subtration = character '-';

multiplication = character '*';
division = character '/';
mod = character '%';

// Patterns
////////////////////////////////////////
as = character '#';
ellipsis = string '...';

// Lambda
////////////////////////////////////////
argumentList = character '\\';

lambda = string '->';

// Punctuators
////////////////////////////////////////
punctuator = Parser('Punctuator Lexer',
    trie(punctuators));

}