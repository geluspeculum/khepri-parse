/**
 * @fileOverview Khepri punctuator lexers.
 */
package (
    punctuator
    operator)
with
    import 'bennu::parse' {
        attempt
        always
        binds
        fail
        label
        either
        enumeration
        map
        many},
    import 'bennu::text' {
        trie
        oneOf},
    
    import 'nu-stream::stream' {foldl}
in {

var join := map @ (foldl @ (+) @ '');

/* Lexers
 ******************************************************************************/
// Punctuator
////////////////////////////////////////
var punctuators := [
    '{', '}', '(', ')', '[', ']',
    ',',  '.', ';', ':',
    '?',
    '=', ':=', '=:',
    '@',
    '...', '#',
    '\\', '->', 'ยง'];

punctuator = label @ 'Punctuator Lexer' <|
    trie punctuators;

// Operator
////////////////////////////////////////
var operators := [
    '&&', '||',
    '<<', '>>', '>>>',
    '<=', '<', '>=', '>',
    '===', '!==', '==', '!=',
    '!', '~', '++', '--',
    '&', '|', '^', 
    '+', '-', '*', '/', '%',
    '|>', '<|',
    '\\>', '\\>>', '<\\', '<<\\'];

var operatorChar := oneOf '?:+-*/%|&^<>=!~@';

operator = label @ 'Operator Lexer' <| binds(
    enumeration(
        trie operators,
        join <| many operatorChar),
    (+) \>> \x ->
        ?punctuators.indexOf x >= 0
            :fail("Cannot use puctuator "+ x + " as operator")
            :always x);


}