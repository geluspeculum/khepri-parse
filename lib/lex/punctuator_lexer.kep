/**
 * @fileOverview Khepri punctuator lexers.
 */
package (
    punctuator
    
    prefixOperator
    infixOperator
    
    operator)
with
    import 'bennu::parse' {
        attempt
        always
        binds
        fail
        label
        either
        enumeration
        map
        many},
    import 'bennu::text' {
        trie
        oneOf},
    
    import 'nu-stream::stream' {foldl}
in {

var join := map @ (foldl @ (+) @ '');

/* Lexers
 ******************************************************************************/
// Punctuator
////////////////////////////////////////
var punctuators := [
    '{', '}', '(', ')', '[', ']',
    ',',  '.', ';', ':',
    '?',
    '=', ':=', '=:',
    '@',
    '...', '#',
    '\\', '->', 'ยง'];

punctuator = label @ 'Punctuator Lexer' <|
    trie punctuators;

// Prefix Operator
////////////////////////////////////////
var operatorChar := oneOf '?+-*/%|&^<>=!~@';

prefixOperator := label @ 'Prefix Operator Lexer' <| binds(
    enumeration(
        trie ['~', '!', '++', '--'],
        join <| many operatorChar),
    always <<\ (+));

// Infix Operator
////////////////////////////////////////
infixOperator = label @ 'Infix Operator Lexer' <| binds(
    enumeration(
        trie [
            '&&', '||',
            '<<', '>>', '>>>',
            '<=', '<', '>=', '>',
            '===', '!==', '==', '!=',
            '&', '|', '^', 
            '+', '-', '*', '/', '%',
            '|>', '<|',
            '\\>', '\\>>', '<\\', '<<\\'],
        join <| many operatorChar),
    (+) \>> \x ->
        ?punctuators.indexOf x >= 0
            :fail("Cannot use puctuator "+ x + " as operator")
            :always x);

// Operator
////////////////////////////////////////
operator = label @ 'Prefix Operator Lexer' <|
    either(
        prefixOperator,
        infixOperator);
}