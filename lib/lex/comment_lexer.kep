/**
 * @fileOverview Khepri comment lexers.
 */
package (
    singleLineCommentMarker
    singleLineCommentChar
    singleLineCommentChars
    singleLineComment
    
    multiLineCommentStartMarker
    multiLineCommentEndMarker
    multiLineCommentChars
    multiLineComment
   
    comment)
with
    import 'bennu::parse' {anyToken always bind cons either many next Parser RecParser test token},
    import 'bennu::text' {character string},
    import 'nu-stream::stream' {foldl NIL},
    
    import './line_terminator_lexer' {lineTerminator}
in {

var join = \p ->
    bind(p, foldl@((+), '') \> always);

/* Lexers
 ******************************************************************************/
// Single Line Comment
////////////////////////////////////////
singleLineCommentMarker = string '//';

singleLineCommentChar = token(
    (!) <\ test@lineTerminator);

singleLineCommentChars = many singleLineCommentChar;

/**
 * Lexer for a single line comment
 * 
 * Returns the contents of the comment.
 */
singleLineComment = Parser@'Single Line Comment Lexer' <|
    next(
        singleLineCommentMarker,
        join singleLineCommentChars);

// Multi Line Comment
////////////////////////////////////////
multiLineCommentStartMarker = string '/*';

multiLineCommentEndMarker = string '*/';

multiLineCommentChars = RecParser@'Multi Line Comment Characters Lexer' <|\self ->
    either(
        next(
            character '*',
            either(
                next(character '/', always NIL),
                cons(always '*', self))),
        cons(anyToken, self));

/**
 * Lexer for a multi line comment.
 * 
 * Returns the contents of the comment.
 */
multiLineComment = Parser@'Multi Line Comment Lexer' <|
    next(
        multiLineCommentStartMarker,
        join multiLineCommentChars);

// Comment
////////////////////////////////////////
comment = Parser@'Comment Lexer' <|
    either(
        singleLineComment,
        multiLineComment);

}