/**
 * @fileOverview Khepri identifier lexers
 */
package (
    zwnj
    zwj
    unicodeLetter
    unicodeDigit
    unicodeConnectorPunctuation
    
// Parts
    identifierStart
    identifierPart
    identifierParts
    identifierName
    
// Identifier
    identifier)
with
    import 'bennu::parse' {
        always
        bind
        cons
        choice
        either
        fail
        many
        next
        token
        label},
    import 'bennu::text' {
        character
        oneOf
        digit
        letter
        string},
    
    import './common' {
        join
        match},
    import './reserved_word_lexer' {reservedWordList}
in {

/* Characters
 ******************************************************************************/
/**
 * Zero Width non-joiner
 */
zwnj := character '\u200c';

/**
 * Zero Width joiner
 */
zwj := character '\u200d';

unicodeLetter := match
    '   \\p{Lu}            (?#Uppercase letter)\
    |   \\p{Ll}            (?#Lowercase letter)\
    |   \\p{Lt}            (?#Titlecase letter)\
    |   \\p{Lm}            (?#Modifier letter)\
    |   \\p{Lo}            (?#Other letter)\
    |   \\p{Nl}            (?#Letter number)\
    ';

unicodeDigit := match '\\p{Nd}(?#Number digit)';

unicodeConnectorPunctuation := match '\\p{Pc}(?#Connector Punctuation)';

/* Parts
 ******************************************************************************/
identifierStart :=
    either(
        unicodeLetter,
        oneOf '$_');

identifierPart :=
    choice(
        identifierStart,
        unicodeDigit,
        unicodeConnectorPunctuation,
        zwnj,
        zwj);

identifierParts := many identifierPart;

/**
 * Identifier.
 * 
 * May be a keyword.
 */
identifierName := cons(identifierStart, identifierParts);

/* Identifier
 ******************************************************************************/
/**
 * Lexer for an identifier.
 * 
 * Checks to make sure returned identifier is not a keyword.
 */
identifier := label@'Identifier Lexer' <|
    bind(join identifierName, \name ->
        let n = name in
            ?reservedWordList.indexOf(n) >= 0
                :fail()
                :always n);

}