/**
 * @fileOverview Khepri identifier lexers
 */
package (
    zwnj
    zwj
    unicodeLetter
    unicodeDigit
    unicodeConnectorPunctuation
    unicodeCombiningMark
    
// Parts
    identifierStart
    identifierPart
    identifierParts
    identifierName
    
// Identifier
    identifier)
with
    import 'bennu::parse' {
        always
        attempt 
        bind
        cons
        choice
        either
        eof
        fail
        many
        never
        next
        Parser
        testStream
        token},
    import 'bennu::text' {
        character
        characters
        digit
        letter
        string},
    import 'nu-stream::stream' {foldl},
    import './reserved_word_lexer' {reservedWord}
in {

var join = foldl@((+), '');

/* Lexers
 ******************************************************************************/
// Characters
////////////////////////////////////////
/**
 * Zero Width non-joiner Lexer
 */
zwnj = character '\u200c';

/**
 * Zero Width joiner Lexer
 */
zwj = character '\u200d';

/**
 * Lexer for a unicode letter character.
 * 
 * Any character in any of the Unicode categories:
 * - Uppercase letter (Lu)
 * - Lowercase letter (Ll)
 * - Titlecase letter (Lt)
 * - Modifier letter (Lm)
 * - Other letter (Lo)
 * - Letter number (Nl)
 * 
 * @TODO Implement for unicode based on spec.
 */
unicodeLetter = letter; 

/**
 * Lexer for a Unicode digit character.
 * 
 * Any character in the Unicode category Decimal number (Nd).
 * 
 * @TODO Implement for unicode based on spec.
 */
unicodeDigit = digit;

/**
 * Lexer for a Unicode connector punctuation character.
 * 
 * Any character in the Unicode category Connector Punctuation (Pc).
 */
unicodeConnectorPunctuation = characters [
    '\u005F',
    '\u203F',
    '\u2040',
    '\u2054',
    '\uFE33',
    '\uFE34',
    '\uFE4D',
    '\uFE4E',
    '\uFE4F',
    '\uFF3F'];

/**
 * Lexer for any combining mark Unicode character.
 * 
 * Any character in any of the Unicode categories:
 * - Non-spacing mark (Mn)
 * - Combining spacing mark (Mc)
 * 
 * @TODO Implement for unicode based on spec
 */
unicodeCombiningMark = never();

// Parts
////////////////////////////////////////
/**
 * Lexer for the start of an identifier.
 */
identifierStart = either(
    unicodeLetter,
    characters '$_');

/**
 * Lexer for the rest of an identifier after the first character.
 */
identifierPart = choice(
    attempt identifierStart,
    unicodeCombiningMark,
    unicodeDigit,
    unicodeConnectorPunctuation,
    zwnj,
    zwj);

identifierParts = many identifierPart;

/**
 * Lexer for any identifier name.
 * 
 * May be a keyword.
 */
identifierName = cons(identifierStart, identifierParts);

// Identifier
////////////////////////////////////////
var reservedWordTest = next(
    reservedWord,
    eof);

/**
 * Lexer for an identifier.
 * 
 * Checks to make sure returned identifier is not a keyword.
 */
identifier = Parser@'Identifier Lexer' <|
    bind(identifierName, \name ->
        ?testStream(reservedWordTest, name)
            :fail()
            :always(join name));

}