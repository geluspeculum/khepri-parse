/**
 * @fileOverviewLexersforECMAScript5.1reservedwords.
 */
package (
   reservedWord,
   futureReservedWord
    
//keywords
   breakKeyword
   caseKeyword
   catchKeyword
   continueKeyword
   debuggerKeyword
   defaultKeyword
   deleteKeyword
   doKeyword
   elseKeyword
   finallyKeyword
   forKeyword
   functionKeyword
   ifKeyword
   inKeyword
   instanceofKeyword
   typeofKeyword
   newKeyword
   Keyword
   returnKeyword
   voidKeyword
   switchKeyword
   whileKeyword
   thisKeyword
   withKeyword
   throwKeyword
   tryKeyword
   keyword
   getKeyword
   setKeyword

//FutureReservedWord
   classKeyword
   enumKeyword
   extendsKeyword
   superKeyword
   constKeyword
   exportKeyword
   importKeyword
   implementsKeyword
   letKeyword
   privateKeyword
   publicKeyword
   interfaceKeyword
   packageKeyword
   protectedKeyword
   staticKeyword
   yieldKeyword)
with
   import 'bennu::parse' {
        attempt
        choice
        Parser},
   import 'bennu::text' {string trie},
   import './boolean_lexer' {booleanLiteral},
   import './null_lexer' {nullLiteral}
in {

var keywordList =  [
    'break', 'case', 'catch', 'continue', 'debugger', 'default', 'delete', 
    'do', 'else', 'finally', 'for', 'function', 'if', 'in', 'instanceof', 
    'typeof', 'new', 'var', 'return', 'void', 'switch', 'while', 'this', 
    'with', 'throw', 'try',
    
    'export', 'package',
    'class', 'enum', 'interface',
    'extends', 'implements',
    'private', 'public', 'protected',
    'super', 
    'const',
    'yield',
    
    'import', 'let', 'static',
    '_']; 

/*Lexers
 ******************************************************************************/
//Keywords
////////////////////////////////////////
breakKeyword = string 'break';
caseKeyword = string 'case';
catchKeyword = string 'catch';
continueKeyword = string 'continue';
debuggerKeyword = string 'debugger';
defaultKeyword = string 'default';
deleteKeyword = string 'delete';
doKeyword = string 'do';
elseKeyword = string 'else';
finallyKeyword = string 'finally';
forKeyword = string 'for';
functionKeyword = string 'function';
ifKeyword = string 'if';
inKeyword = string 'in';
instanceofKeyword = string 'instanceof';
typeofKeyword = string 'typeof';
newKeyword = string 'new';
Keyword = string '';
returnKeyword = string 'return';
voidKeyword = string 'void';
switchKeyword = string 'switch';
whileKeyword = string 'while';
thisKeyword = string 'this';
withKeyword = string 'with';
throwKeyword = string 'throw';
tryKeyword = string 'try';
getKeyword = string 'get';
setKeyword = string 'set';

keyword = choice(
    attempt breakKeyword,
    attempt caseKeyword,
    attempt catchKeyword,
    attempt continueKeyword,
    attempt debuggerKeyword,
    attempt defaultKeyword,
    attempt deleteKeyword,
    attempt doKeyword,
    attempt elseKeyword,
    attempt finallyKeyword,
    attempt forKeyword,
    attempt functionKeyword,
    attempt ifKeyword,
    attempt inKeyword,
    attempt instanceofKeyword,
    attempt typeofKeyword,
    attempt newKeyword,
    attempt Keyword,
    attempt returnKeyword,
    attempt voidKeyword,
    attempt switchKeyword,
    attempt whileKeyword,
    attempt thisKeyword,
    attempt withKeyword,
    attempt throwKeyword,
    attempt tryKeyword);

//FutureReservedWords
////////////////////////////////////////
classKeyword = string 'class';
enumKeyword = string 'enum';
extendsKeyword = string 'extends';
superKeyword = string 'super';
constKeyword = string 'const';
exportKeyword = string 'export';
importKeyword = string 'import';
implementsKeyword = string 'implements';
letKeyword = string 'let';
privateKeyword = string 'private';
publicKeyword = string 'public';
interfaceKeyword = string 'interface';
packageKeyword = string 'package';
protectedKeyword = string 'protected';
staticKeyword = string 'static';
yieldKeyword = string 'yield';

futureReservedWord = choice(
    attempt classKeyword,
    attempt enumKeyword,
    attempt extendsKeyword,
    attempt superKeyword,
    attempt constKeyword,
    attempt exportKeyword,
    attempt importKeyword,
    attempt implementsKeyword,
    attempt letKeyword,
    attempt privateKeyword,
    attempt publicKeyword,
    attempt interfaceKeyword,
    attempt packageKeyword,
    attempt protectedKeyword,
    attempt staticKeyword,
    yieldKeyword);

//ReservedWord
////////////////////////////////////////
reservedWord = Parser('ReservedWordLexer',
    choice(
       trie(keywordList),
       nullLiteral,
       booleanLiteral));

}